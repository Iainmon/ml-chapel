AST dump for tensor_test_2 after pass createTaskFunctions.
Module use list: ChapelStandard Tensor 

{
  function chpl__init_tensor_test_2[496692]() : void[4] "insert line file info" "module init"
  {
    unknown call_tmp[864147] "maybe param" "maybe type" "temp"
    (864150 'move' call_tmp[864147](201436 call zeros module=[259] Tensor[209780] 3 3 3))
    (659047 'init var' a[201431] call_tmp[864147])
    (201443 'end of statement')
    unknown call_tmp[864152] "maybe param" "maybe type" "temp"
    (864155 'move' call_tmp[864152](201449 call zeros module=[259] Tensor[209780] 3 3))
    (659049 'init var' b[201445] call_tmp[864152])
    (201455 'end of statement')
    {
      unknown _indexOfInterest[201497] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[201498] "expr temp" "temp"
      unknown call_tmp[864157] "expr temp" "maybe param" "maybe type" "temp"
      (864160 'move' call_tmp[864157](201461 call chpl_build_low_bounded_range 0))
      unknown call_tmp[864162] "expr temp" "maybe param" "maybe type" "temp"
      (864165 'move' call_tmp[864162](201458 call # call_tmp[864157] 3))
      (201507 'move' _iterator[201498](201505 call _getIterator call_tmp[864162]))
      Defer
      {
        {
          (201522 call _freeIterator _iterator[201498])
        }
      }
      { scopeless type
        (201512 'move' _indexOfInterest[201497](201509 call iteratorIndex _iterator[201498]))
      }
      ForLoop[201499]
      {
        unknown i[201456] "index var" "insert auto destroy"
        (576099 'end of statement')
        (201517 'move' i[201456] _indexOfInterest[201497])
        (576100 'end of statement' i[201456])
        {
          unknown call_tmp[864167] "expr temp" "maybe param" "maybe type" "temp"
          (864170 'move' call_tmp[864167](201473 call chpl_build_unbounded_range))
          unknown call_tmp[864172] "expr temp" "maybe param" "maybe type" "temp"
          (864175 'move' call_tmp[864172](201475 call chpl_build_unbounded_range))
          unknown call_tmp[864177] "expr temp" "maybe param" "maybe type" "temp"
          (864180 'move' call_tmp[864177](201472 call a[201431] call_tmp[864167] call_tmp[864172] i[201456]))
          unknown call_tmp[864182] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (864185 'move' call_tmp[864182](977667 'new' Tensor[204262](?) call_tmp[864177]))
          const a_i[201466] "dead at end of block" "const" "insert auto destroy"
          (659051 'init var' a_i[201466] call_tmp[864182])
          (201479 'end of statement')
          unknown call_tmp[864187] "maybe param" "maybe type" "temp"
          (864190 'move' call_tmp[864187](201483 call foo a_i[201466]))
          const c[201481] "dead at end of block" "const" "insert auto destroy"
          (659053 'init var' c[201481] call_tmp[864187])
          (201486 'end of statement' a[201431] i[201456] a_i[201466])
          unknown call_tmp[864194] "expr temp" "maybe param" "maybe type" "temp"
          (864197 'move' call_tmp[864194](201490 call data _mt[240] b[201445]))
          unknown call_tmp[864201] "expr temp" "maybe param" "maybe type" "temp"
          (864204 'move' call_tmp[864201](201494 call data _mt[240] c[201481]))
          (201487 call += call_tmp[864194] call_tmp[864201])
          (576105 'end of statement' b[201445] c[201481])
        }
        label _continueLabel[201502]
        _indexOfInterest[201497]
        _iterator[201498]
      }
      label _breakLabel[201503]
    }
    (201530 call writeln b[201445])
    (576108 'end of statement' b[201445])
    (626857 return _void[58])
  }
  function foo[201405](arg x[201410]:Tensor[204262](?)) : _unknown[54] "compiler added where"
  {
    unknown ret[626848] "RVV" "temp"
    unknown t[201415] "dead at end of block" "insert auto destroy"
    (659045 'init var' t[201415] x[201410])
    (201418 'end of statement')
    unknown call_tmp[864132] "expr temp" "maybe param" "maybe type" "temp"
    (864135 'move' call_tmp[864132](201422 call data _mt[240] t[201415]))
    (201419 call += call_tmp[864132] 1)
    (576094 'end of statement' t[201415])
    (626853 'move' ret[626848](626852 'deref' t[201415]))
    gotoReturn _end_foo[626846] _end_foo[626846]
    (576096 'end of statement' t[201415])
    label _end_foo[626846]
    (626850 return ret[626848])
  }
  where {
    unknown call_tmp[864137] "expr temp" "maybe param" "maybe type" "temp"
    (864140 'move' call_tmp[864137](545203 'query' x[201410] 1))
    unknown call_tmp[864142] "expr temp" "maybe param" "maybe type" "temp"
    (864145 'move' call_tmp[864142](545207 call == 2 call_tmp[864137]))
    (545211 call & 1 call_tmp[864142])
  }
  unknown a[201431] "dead at end of block" "insert auto destroy"
  unknown b[201445] "dead at end of block" "insert auto destroy"
  function main[980262]() : void[4]
  {
    (980265 return _void[58])
  }
  function chpl_gen_main[980268](const  ref arg _arg[980267]:chpl_main_argument[154531]) : int(64)[13] "compiler generated" "export" "generated main" "local args"
  {
    val ret[980311]:int(64)[13] "RVV" "temp"
    val _main_ret[980272]:int(64)[13] "temp"
    unknown _endCount[980274] "temp"
    (980279 'move' _endCount[980274](980276 call _endCountAlloc 0))
    (980281 'set dynamic end count' _endCount[980274])
    (980301 'end of statement')
    (980283 call chpl_rt_preUserCodeHook)
    (980302 'end of statement')
    (980285 call chpl__init_tensor_test_2[496692])
    (980303 'end of statement')
    (980287 call main)
    (980304 'end of statement')
    (980289 'move' _main_ret[980272] 0)
    (980292 call chpl_rt_postUserCodeHook)
    (980305 'end of statement')
    (980294 call _waitEndCount _endCount[980274])
    (980306 'end of statement')
    (980297 call chpl_deinitModules)
    (980307 'end of statement')
    (980316 'move' ret[980311](980315 'deref' _main_ret[980272]))
    (980313 return ret[980311])
  }
  (415115 'used modules list'(393253 'use' ChapelStandard[26819])(201399 'import' Tensor[209780] 'as' tn)(201403 'use' Tensor[209780] 'only' Tensor))
  (201433 'referenced modules list' Tensor[209780] Tensor[209780])
}